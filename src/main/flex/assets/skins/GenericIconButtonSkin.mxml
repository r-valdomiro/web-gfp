<?xml version = "1.0" encoding = "utf-8"?>
<s:SparkSkin xmlns:fx = "http://ns.adobe.com/mxml/2009"
			 xmlns:s = "library://ns.adobe.com/flex/spark"
			 xmlns:fb = "http://ns.adobe.com/flashbuilder/2009"
			 currentStateChange = "stateChangeHandler(event)"
			 minHeight = "45">
	<fx:Metadata>
		<![CDATA[ 
		[HostComponent("spark.components.Button")]
	    ]]>
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElement;
			import mx.core.IVisualElementContainer;
			import mx.events.StateChangeEvent;
			
			import mx.graphics.IFill;
			import mx.graphics.SolidColor;
			import spark.primitives.supportClasses.FilledElement;
			
			private static const exclusions:Array = ["symbol", "textGroup"];
			
			override public function get colorizeExclusions():Array
			{
				return exclusions;
			}
			
			[Bindable]
			private var baseIconScale:Number;
			
			private var cachedSymbols:Array = new Array();
			
			private var currentColor:uint;
			
			private var currentIconClass:Class;
			
			[Bindable]
			private var currentSymbol:Group;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				var scale:Object = hostComponent.getStyle("iconScale");
				scale != null ? baseIconScale = Number(scale) : baseIconScale = Number(1);
			}
			
			protected function createFXGComponent(klass:Class):Group
			{
				return new klass();
			}
			
			protected function getLibraryDefinitionInstance(klass:Class, oldState:String
															, newState:String):Group
			{
				var el:Group = null;
				
				if ((el = cachedSymbols[klass.toString()]) != null)
				{
					return el;
				}
				else
				{
					el = createFXGComponent(klass);
					
					el.horizontalCenter = 2;
					el.verticalCenter = -1;
					el.width = el.height = 0;
					
					if (currentState == "up" || (currentState == "over" && oldState !=
						"down"))
					{
						el.scaleX = el.scaleY = baseIconScale;
					}
					else
					{
						el.scaleX = el.scaleY = 1;
					}
					
					cachedSymbols[klass.toString()] = el;
					return el;
				}
			}
			
			override protected function initializationComplete():void
			{
				this.useChromeColor = true;
				super.initializationComplete();
			}
			
			protected function stateChangeHandler(event:StateChangeEvent):void
			{
				updateSymbol(event);
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private function fillIconWithColor(el:IVisualElementContainer, color:uint):void
			{
				for (var i:int = 0; i < el.numElements; i++)
				{
					var elem:Object = el.getElementAt(i);
					
					if (elem is IVisualElementContainer)
					{
						fillIconWithColor(IVisualElementContainer(elem), color);
					}
					else if (elem is FilledElement)
					{
						var fill:IFill = FilledElement(elem).fill;
						
						if (fill is SolidColor)
						{
							SolidColor(fill).color = color;
						}
					}
				}
			}
			
			private function updateSymbol(event:StateChangeEvent):void
			{
				var iconClass:Class = hostComponent.getStyle("iconClass");
				
				if (iconClass == null)
				{
					return;
				}
				var color:uint = hostComponent.getStyle('iconColor');
				
				if (currentSymbol == null || currentSymbol != null && currentIconClass !=
					iconClass)
				{
					var el:Group = getLibraryDefinitionInstance(iconClass, event
																.oldState, event
																.newState);
					
					symbol.removeAllElements();
					
					symbol.addElementAt(el, 0);
					currentSymbol = el;
					currentIconClass = iconClass;
					fillIconWithColor(currentSymbol, color);
				}
				else
				{
					if (currentColor != color)
					{
						fillIconWithColor(currentSymbol, color);
					}
				}
				
				currentColor = color;
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:Linear id = "easer1"
				  easeInFraction = ".35"
				  easeOutFraction = ".65"/>
	</fx:Declarations>

	<s:states>
		<s:State name = "up"/>

		<s:State name = "over"
				 stateGroups = "overStates"/>

		<s:State name = "down"
				 stateGroups = "overStates"/>

		<s:State name = "disabled"/>
	</s:states>

	<s:transitions>
		<s:Transition fromState = "up"
					  toState = "over"
					  autoReverse = "true">
			<s:Parallel>
				<s:AnimateColor targets = "{[ge1, ge2, ge3, ge4]}"
								duration = "250"/>

				<s:Scale duration = "150"
						 target = "{currentSymbol}"
						 scaleXTo = "1"
						 scaleYTo = "1"
						 easer = "{easer1}"
						 autoCenterTransform = "true"/>
			</s:Parallel>
		</s:Transition>

		<s:Transition fromState = "over"
					  toState = "up"
					  autoReverse = "true">
			<s:Parallel>
				<s:AnimateColor targets = "{[ge1, ge2, ge3, ge4]}"
								duration = "750"/>

				<s:Scale duration = "150"
						 target = "{currentSymbol}"
						 scaleXTo = "{baseIconScale}"
						 scaleYTo = "{baseIconScale}"
						 easer = "{easer1}"
						 autoCenterTransform = "true"/>
			</s:Parallel>
		</s:Transition>

		<s:Transition fromState = "over"
					  toState = "down"
					  autoReverse = "true">
			<s:Animate duration = "150"
					   targets = "{[dsfBg, dsfSymbol]}">
				<s:SimpleMotionPath property = "strength"/>
			</s:Animate>
		</s:Transition>

		<s:Transition fromState = "down"
					  toState = "*"
					  autoReverse = "true">
			<s:Animate duration = "150"
					   targets = "{[dsfBg, dsfSymbol]}">
				<s:SimpleMotionPath property = "strength"/>
			</s:Animate>
		</s:Transition>

		<s:Transition fromState = "down"
					  toState = "*"
					  autoReverse = "true">
			<s:Animate duration = "150"
					   targets = "{[dsfBg, dsfSymbol]}">
				<s:SimpleMotionPath property = "strength"/>
			</s:Animate>
		</s:Transition>
	</s:transitions>

	<s:Rect left = "1"
			right = "1"
			top = "1"
			bottom = "1"
			radiusX = "4"
			radiusY = "4">
		<s:filters>
			<s:DropShadowFilter id = "dsfBg"
								alpha = "0.5"
								blurX = "0"
								blurY = "0"
								distance = "1"
								strength = "1"
								strength.down = "0"/>
		</s:filters>

		<s:fill>
			<s:LinearGradient rotation = "90">
				<s:GradientEntry id = "ge1"
								 color = "#c0c0c0"
								 color.overStates = "#ffffff"
								 ratio = "0"/>

				<s:GradientEntry id = "ge2"
								 color = "#939393"
								 color.overStates = "#e3e3e3"
								 ratio = "0.5"/>

				<s:GradientEntry id = "ge3"
								 color = "#7e7e7e"
								 color.overStates = "#cecece"
								 ratio = "0.5"/>

				<s:GradientEntry id = "ge4"
								 color = "#6a6a6a"
								 color.overStates = "#bbbbbb"
								 ratio = "1"/>
			</s:LinearGradient>
		</s:fill>

		<s:stroke>
			<s:SolidColorStroke color = "#ffffff"
								caps = "none"
								weight = "1"
								joints = "miter"
								miterLimit = "4"/>
		</s:stroke>
	</s:Rect>

	<s:Line blendMode = "overlay"
			verticalCenter = "0"
			height = "90%"
			left = "43">
		<s:stroke>
			<s:SolidColorStroke color = "#3d3d3d"
								weight = ".25"/>
		</s:stroke>
	</s:Line>

	<s:Group id = "textGroup"
			 verticalCenter = "1"
			 left = "50"
			 width = "100%">
		<s:filters>
			<s:DropShadowFilter alpha = "0.5"
								blurX = "0"
								blurY = "0"
								distance = "1"/>
		</s:filters>

		<s:Label id = "labelDisplay"
				 textAlign = "center"
				 verticalAlign = "middle"
				 lineBreak = "toFit"
				 right = "10"
				 width = "100%"
				 color = "#e0e0e0">
		</s:Label>
	</s:Group>

	<s:Group id = "symbol"
			 verticalCenter = "0"
			 width = "40"
			 height = "45">
		<s:filters>
			<s:DropShadowFilter id = "dsfSymbol"
								blurX = "0"
								blurY = "0"
								distance = "1"
								strength = "1"
								strength.down = "0"/>
		</s:filters>
	</s:Group>
</s:SparkSkin>
