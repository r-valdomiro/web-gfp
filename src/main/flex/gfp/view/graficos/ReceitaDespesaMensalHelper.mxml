<?xml version = "1.0" encoding = "utf-8"?>
<s:VGroup xmlns:fx = "http://ns.adobe.com/mxml/2009"
		  xmlns:s = "library://ns.adobe.com/flex/spark"
		  xmlns:mx = "library://ns.adobe.com/flex/mx"
		  horizontalAlign = "center"
		  creationComplete = "creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import common.custom.ICustomEvent;
			import common.util.DateUtil;
			import common.util.NumberUtil;
			
			import gfp.dto.LancamentoDto;
			import gfp.event.AppEvent;
			import gfp.event.TransacaoEvent;
			import gfp.type.CategoriaType;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			[Dispatcher]
			public var dispatcher:IEventDispatcher;
			
			public var grafico:GraficoTemplate;
			
			[Bindable]
			protected var dataProvider:ArrayCollection;
			
			private var ano:Number;
			
			private function get chartData():ArrayCollection
			{
				var result:ArrayCollection = new ArrayCollection();
				
				if (dataProvider && dataProvider.length > 0)
				{
					var dto:Object;
					var sLink:String;
					var sTooltip:String;
					
					for each (dto in dataProvider)
					{
						var excedente:Boolean = dto.categoria.tipo == CategoriaType
							.RECEITA ? dto.valor < dto.previsao : dto.valor > dto
							.previsao;
						result.addItem({label: dto.categoria.descricao + (excedente
											   ? " *" : "")});
					}
					
					result.addItem({seriesName: 'Realizado'});
					
					for each (dto in dataProvider)
					{
						var sRealizado:String = "{br}Realizado: " + NumberUtil.formatNumber(dto
																							.valor
																							, 2);
						var sRemanescente:String = "{br}Remanescente: " + NumberUtil
							.formatNumber(dto.previsao - dto.valor, 2);
						var sPrevisto:String = dto.previsao > 0 ? "{br}" + NumberUtil
							.formatNumber(dto.valor / dto.previsao * 100, 1) + "% do Previsto"
							: "";
						var sTotal:String = "{br}" + NumberUtil.formatNumber(dto
																			 .valor
																			 / total
																			 * 100
																			 , 1)
							+ "% do Total";
						sLink = "E-itemClickHandler," + dataProvider.getItemIndex(dto);
						result.addItem({value: dto.valor, tooltext: dto.categoria
											   + sRealizado + sRemanescente + sPrevisto
											   + sTotal, link: sLink});
					}
					
					result.addItem({seriesName: 'Previsto'});
					
					for each (dto in dataProvider)
					{
						sLink = "E-itemClickHandler," + dataProvider.getItemIndex(dto);
						sTooltip = dto.categoria + "{br}Previsto: " + NumberUtil
							.formatNumber(dto.previsao, 2);
						
						result.addItem({value: dto.valor <= dto.previsao ? dto.previsao
											   - dto.valor : 0, tooltext: sTooltip
										   , link: sLink});
					}
				}
				
				return result;
			}
			
			private function get chartParams():ArrayCollection
			{
				var result:ArrayCollection = new ArrayCollection();
				
				if (dataProvider && dataProvider.length > 0)
				{
					var params:Object = new Object();
					params.showValues = "0";
					params.forceDecimals = "0";
					params.formatNumber = "1";
					params.formatNumberScale = "0";
					params.decimals = "0";
					params.thousandSeparator = ".";
					params.decimalSeparator = ",";
					params.bgColor = "#eef4fb";
					params.baseFontColor = "#2074A3";
					params.toolTipBorderColor = "#2074A3";
					params.showBorder = "0";
					params.rotateLabels = "1";
					params.slantLabels = "1";
					params.caption = descricao;
					params.subCaption = NumberUtil.formatNumber(total, 2);
					result.addItem(params);
				}
				
				return result;
			}
			
			[Bindable]
			private var descricao:String;
			
			private var mes:Number;
			
			private var total:Number = 0;
			
			[EventHandler(event = "AppEvent.ATUALIZAR_GRAFICO_MENSAL", properties = "event")]
			public function carregarMesAno(event:ICustomEvent):void
			{
				mes = (event.object as Date).month;
				ano = (event.object as Date).fullYear;
			}
			
			public function itemClickHandler(index:int):void
			{
				var item:Object = dataProvider.getItemAt(index);
				
				var dto:LancamentoDto = new LancamentoDto();
				dto.tipoPeriodo = 1;
				dto.dataInicio = DateUtil.firstDayOfMonth(mes, ano);
				dto.dataFinal = DateUtil.lastDayOfMonth(mes, ano);
				dto.categoria = item.categoria.id;
				dispatcher.dispatchEvent(new AppEvent(AppEvent.TO_TRANSACOES_DIA
													  , dto));
			}
			
			protected function atualizarTotal(descricao:String):void
			{
				this.descricao = descricao;
				
				total = 0;
				
				for each (var o:Object in dataProvider)
				{
					total += o.valor;
				}
				
				if (descricao == "Receitas")
				{
					dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent.ATUALIZAR_CREDITO
																, total));
				}
				else
				{
					dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent.ATUALIZAR_DEBITO
																, total));
				}
				
				callLater(updateChart);
			}
			
			private function createGrafico():void
			{
				if (grafico)
				{
					removeElement(grafico);
				}
				
				grafico = new GraficoTemplate();
				addElement(grafico);
			}
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				createGrafico();
			}
			
			private function updateChart():void
			{
				createGrafico();
				grafico.render(this, GraficoTemplate.TypeStackedBar3D, chartParams
							   , chartData);
			}
		]]>
	</fx:Script>
</s:VGroup>
