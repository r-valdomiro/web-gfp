<?xml version = "1.0" encoding = "utf-8"?>
<s:VGroup xmlns:fx = "http://ns.adobe.com/mxml/2009"
		  xmlns:s = "library://ns.adobe.com/flex/spark"
		  xmlns:mx = "library://ns.adobe.com/flex/mx"
		  xmlns:serviceFeedback = "common.components.serviceFeedback.*"
		  xmlns:components = "com.fusioncharts.components.*"
		  horizontalAlign = "center">
	<fx:Script>
		<![CDATA[
			import common.component.custom.StyleColumnChart;
			import common.custom.CustomEvent;
			import common.custom.ICustomEvent;
			import common.util.DateUtil;
			import common.util.NumberUtil;
			
			import gfp.dto.LancamentoDto;
			import gfp.event.AppEvent;
			import gfp.event.TransacaoEvent;
			import gfp.model.Categoria;
			
			import mx.charts.HitData;
			import mx.charts.events.ChartItemEvent;
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			
			import spark.components.Application;
			
			[Dispatcher]
			public var dispatcher:IEventDispatcher;
			
			[Bindable]
			protected var dataProvider:ArrayCollection;
			
			private var ano:Number;
			
			private function get chartData():ArrayCollection
			{
				var result:ArrayCollection = new ArrayCollection();
				
				if (dataProvider.length == 0)
				{
					return result;
				}
				
				var dto:Object;
				var sLink:String;
				
				for each (dto in dataProvider)
				{
					result.addItem({label: dto.categoria.descricao});
				}
				
				result.addItem({seriesName: 'Realizado'});
				
				for each (dto in dataProvider)
				{
					var sRealizado:String = "{br}Realizado: " + NumberUtil.formatNumber(dto
																						.valor
																						, 2);
					var sPrevisto:String = dto.previsao > 0 ? "{br}" + NumberUtil
						.formatNumber(dto.valor / dto.previsao * 100, 1) + "% do Previsto"
						: "";
					var sTotal:String = "{br}" + NumberUtil.formatNumber(dto.valor
																		 / total
																		 * 100, 1)
						+ "% do Total";
					sLink = "E-itemClickHandler," + dataProvider.getItemIndex(dto);
					result.addItem({value: dto.valor, tooltext: dto.categoria + sRealizado
										   + sPrevisto + sTotal, link: sLink});
				}
				
				result.addItem({seriesName: 'Previsto'});
				
				for each (dto in dataProvider)
				{
					sLink = "E-itemClickHandler," + dataProvider.getItemIndex(dto);
					result.addItem({value: dto.previsao, tooltext: dto.categoria
										   + "{br}Previsto: " + NumberUtil.formatNumber(dto
																						.previsao
																						, 2)
									   , link: sLink});
				}
				
				return result;
			}
			
			private var _chartParams:ArrayCollection;
			
			private function get chartParams():ArrayCollection
			{
				if (!dataProvider || dataProvider.length == 0)
				{
					return new ArrayCollection();
				}
				
				if (!_chartParams)
				{
					_chartParams = new ArrayCollection();
					var params:Object = new Object();
					params.showValues = '0';
					params.bgColor = "#eef4fb";
					_chartParams.addItem(params);
				}
				
				return _chartParams;
			}
			
			[Bindable]
			private var descricao:String;
			
			private var mes:Number;
			
			private var total:Number = 0;
			
			[EventHandler(event = "AppEvent.ATUALIZAR_GRAFICO_MENSAL", properties = "event")]
			public function carregarMesAno(event:ICustomEvent):void
			{
				mes = (event.object as Date).month;
				ano = (event.object as Date).fullYear;
			}
			
			public function itemClickHandler(index:int):void
			{
				var item:Object = dataProvider.getItemAt(index);
				
				var dto:LancamentoDto = new LancamentoDto();
				dto.tipoPeriodo = 0;
				dto.dataInicio = DateUtil.firstDayOfMonth(mes, ano);
				dto.dataFinal = DateUtil.lastDayOfMonth(mes, ano);
				dto.categoria = item.categoria.id;
				dispatcher.dispatchEvent(new AppEvent(AppEvent.TO_TRANSACOES_DIA
													  , dto));
			}
			
			protected function atualizarTotal(descricao:String):void
			{
				this.descricao = descricao;
				
				total = 0;
				
				for each (var o:Object in dataProvider)
				{
					total += o.valor;
				}
				
				labelDescricao.text = descricao;
				labelTotal.text = NumberUtil.formatNumber(total, 2);
				
				if (descricao == "Receitas")
				{
					dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent.ATUALIZAR_CREDITO
																, total));
				}
				else
				{
					dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent.ATUALIZAR_DEBITO
																, total));
				}
				
				grafico.FCFlexFunctionsObject ||= this;
				grafico.FCData(chartData);
				grafico.FCParams(chartParams);
				grafico.FCRender();
			}
//			private function dataTipFunction(e:HitData):String
//			{
//				var pValor:Number = (e.item).valor / total * 100;
//				var pPrevisto:Number = (e.item).valor / (e.item).previsao * 100;
//				return (e.item).categoria + "\n Valor Total: " + NumberUtil.formatNumber((e
//																						 .item)
//																						 .valor
//																						 , 2)
//					+ (!isNaN((e.item).previsao) ? "\n Valor Previsto: " + NumberUtil
//					.formatNumber((e.item).previsao, 2) : "") + "\n " + NumberUtil
//					.formatNumber(pValor, 1) + "% das " + descricao + (!isNaN((e
//																			  .item)
//																			  .previsao)
//					? ("\n " + NumberUtil.formatNumber(pPrevisto, 1) + "% do Previsto")
//					: "");
//			}
		]]>
	</fx:Script>

	<!--
		<fx:Declarations>
			<mx:SeriesInterpolate id = "interpolateIn"
								  duration = "1000"/>
		</fx:Declarations>
	-->
	<s:VGroup horizontalAlign = "center">
		<s:Label id = "labelDescricao"
				 fontFamily = "Title"
				 fontSize = "14"
				 color = "#014C6B"/>

		<s:Label id = "labelTotal"/>
	</s:VGroup>

	<s:Group width = "100%"
			 height = "100%">
		<components:FusionCharts id = "grafico"
								 width = "100%"
								 height = "100%"
								 FCChartType = "StackedBar3D">
			<components:FCChartData ChartNoDataText = "Não há lançamentos neste período."/>
		</components:FusionCharts>

		<mx:Canvas width = "{grafico.width}"
				   height = "18"
				   backgroundColor = "#eef4fb"
				   x = "{grafico.x}"
				   y = "{grafico.y}"/>
	</s:Group>

	<!--
	<s:Group width = "100%"
			 height = "100%">
		<mx:BarChart id = "grafico"
					 type = "stacked"
					 showDataTips = "true"
					 dataTipFunction = "{dataTipFunction}"
					 itemClick = "itemClickHandler(event)"
					 width = "100%"
					 height = "100%">
			<mx:verticalAxis>
				<mx:CategoryAxis categoryField = "categoria"/>
			</mx:verticalAxis>

			<mx:series>
				<mx:BarSeries xField = "previsao"
							  showDataEffect = "{interpolateIn}"
							  fontSize = "8"
							  fill = "{descricao == 'Receitas' ? StyleColumnChart.greenLinearGradient : StyleColumnChart.redLinearGradient}"
							  alpha = ".2"/>

				<mx:BarSeries yField = "categoria"
							  xField = "valor"
							  showDataEffect = "{interpolateIn}"
							  fontSize = "8"
							  fill = "{descricao == 'Receitas' ? StyleColumnChart.greenLinearGradient : StyleColumnChart.redLinearGradient}"/>
			</mx:series>
		</mx:BarChart>
	</s:Group>
	-->
</s:VGroup>
