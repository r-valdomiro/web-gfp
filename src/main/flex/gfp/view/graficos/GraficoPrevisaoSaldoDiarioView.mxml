<?xml version = "1.0" encoding = "utf-8"?>
<s:VGroup xmlns:fx = "http://ns.adobe.com/mxml/2009"
		  xmlns:s = "library://ns.adobe.com/flex/spark"
		  xmlns:mx = "library://ns.adobe.com/flex/mx"
		  xmlns:serviceFeedback = "common.spark.component.serviceFeedback.*"
		  xmlns:components = "com.fusioncharts.components.*"
		  xmlns:custom = "common.spark.component.*"
		  width = "100%"
		  height = "100%"
		  horizontalAlign = "center">
	<fx:Script>
		<![CDATA[
			import common.custom.CustomEvent;
			import common.custom.ICustomEvent;
			import common.spark.component.serviceFeedback.skins.LoadingWithBGTextSkin;
			import common.util.DateUtil;
			import common.util.NumberUtil;
			
			import gfp.dto.LancamentoDto;
			import gfp.event.AppEvent;
			import gfp.event.TransacaoEvent;
			import gfp.service.LancamentoService;
			
			import mx.charts.CategoryAxis;
			import mx.charts.HitData;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.events.ChartItemEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Dispatcher]
			public var dispatcher:IEventDispatcher;
			
			[Inject]
			[Bindable]
			public var service:LancamentoService;
			
			private function get chartData():ArrayCollection
			{
				var result:ArrayCollection = new ArrayCollection();
				
				if (service.listaPrevisaoSaldoDiario.length == 0)
				{
					return result;
				}
				
				var dto:Object;
				var sLink:String;
				var sTooltip:String;
				
				for each (dto in service.listaPrevisaoSaldoDiario)
				{
					sTooltip = barTrocaModo.selectedIndex == 0 ? DateUtil.formatSimple(dto
																					   .dataCompensacao) :
						DateUtil.formatSimpleMonthYear(dto.dataCompensacao);
					sTooltip += "{br}Inicial: " + NumberUtil.formatNumber(dto.saldoInicial
																		  , 2);
					sTooltip += "{br}Receitas: " + NumberUtil.formatNumber(dto.receitas
																		   , 2);
					sTooltip += "{br}Despesas: " + NumberUtil.formatNumber(dto.despesas
																		   , 2);
					sTooltip += "{br}Saldo: " + NumberUtil.formatNumber(dto.saldoAcumulado
																		, 2);
					sLink = "E-itemClickHandler," + service.listaPrevisaoSaldoDiario
						.getItemIndex(dto);
					
					result.addItem({label: barTrocaModo.selectedIndex == 0 ? dto
										   .dataCompensacao.date.toString() : DateUtil
										   .formatSimpleMonthYear(dto.dataCompensacao)
									   , value: dto.saldoAcumulado, tooltext: sTooltip
									   , link: sLink});
				}
				
				return result;
			}
			
			private var _chartParams:ArrayCollection;
			
			private function get chartParams():ArrayCollection
			{
				if (!service.listaPrevisaoSaldoDiario || service.listaPrevisaoSaldoDiario
					.length == 0)
				{
					return new ArrayCollection();
				}
				
				_chartParams = new ArrayCollection();
				var params:Object = new Object();
				params.showValues = "0";
				params.bgColor = "#eef4fb";
				params.baseFontColor = "#2074A3";
				params.toolTipBorderColor = "#2074A3";
				params.showBorder = "0";
				params.rotateLabels = "1";
				params.slantLabels = "1";
				params.palette = "3";
				params.caption = "Saldo Previsto";
				params.subCaption = "Próximos " + (barTrocaModo.selectedIndex ==
					0 ? "45 dias" : "12 meses");
				_chartParams.addItem(params);
				
				return _chartParams;
			}
			
			[Bindable]
			private var listaModos:ArrayCollection = new ArrayCollection([{label: "Diário"}
																		  , {label: "Mensal"}]);
			
			[EventHandler(event = "AppEvent.ATUALIZAR_DASHBOARD")]
			public function atualizar(event:ICustomEvent = null):void
			{
				dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent.LISTAR_PREVISAO_SALDO_DIARIO
															, barTrocaModo.selectedIndex +
															1, atualizar_Handler));
			}
			
			public function itemClickHandler(index:int):void
			{
				var item:Object = service.listaPrevisaoSaldoDiario.getItemAt(index);
				
				var dto:LancamentoDto = new LancamentoDto();
				dto.tipoPeriodo = 3;
				dto.dataInicio = item.dataCompensacao;
				dto.dataFinal = barTrocaModo.selectedIndex == 0 ? item.dataCompensacao :
					DateUtil.lastDayOfMonth(item.dataCompensacao.month, item.dataCompensacao
											.fullYear);
				dispatcher.dispatchEvent(new AppEvent(AppEvent.TO_TRANSACOES_DIA
													  , dto));
			}
			
			private function atualizar_Handler(re:ResultEvent):void
			{
				grafico.FCFlexFunctionsObject = this;
				grafico.FCData(chartData);
				grafico.FCParams(chartParams);
				grafico.FCRender();
			}
			
			private function barTrocaModo_changeHandler(event:IndexChangeEvent):void
			{
				dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent.LISTAR_PREVISAO_SALDO_DIARIO
															, event.newIndex + 1
															, atualizar_Handler));
			}
		]]>
	</fx:Script>

	<custom:CustomButtonBar id = "barTrocaModo"
							dataProvider = "{listaModos}"
							requireSelection = "true"
							height = "25"
							change = "barTrocaModo_changeHandler(event)"
							skinClass = "assets.skins.CustomButtonBarSkin"/>

	<s:Group width = "100%"
			 height = "100%">
		<components:FusionCharts id = "grafico"
								 width = "100%"
								 height = "100%"
								 FCChartType = "Line">
			<components:FCChartData ChartNoDataText = "Não há lançamentos neste período."/>
		</components:FusionCharts>

		<mx:Canvas width = "{grafico.width}"
				   height = "18"
				   backgroundColor = "#eef4fb"
				   x = "{grafico.x}"
				   y = "{grafico.y}"/>
	</s:Group>
</s:VGroup>
