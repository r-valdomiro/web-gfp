<?xml version = "1.0" encoding = "utf-8"?>
<s:VGroup xmlns:fx = "http://ns.adobe.com/mxml/2009"
		  xmlns:s = "library://ns.adobe.com/flex/spark"
		  xmlns:mx = "library://ns.adobe.com/flex/mx"
		  xmlns:serviceFeedback = "common.spark.component.serviceFeedback.*"
		  xmlns:custom = "common.spark.component.*"
		  width = "100%"
		  height = "100%"
		  horizontalAlign = "center">
	<fx:Script>
		<![CDATA[
			import common.custom.CustomEvent;
			import common.custom.ICustomEvent;
			import common.spark.component.serviceFeedback.skins.LoadingWithBGTextSkin;
			import common.util.DateUtil;
			import common.util.NumberUtil;
			
			import gfp.dto.LancamentoDto;
			import gfp.event.AppEvent;
			import gfp.event.TransacaoEvent;
			import gfp.service.LancamentoService;
			
			import mx.charts.HitData;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.events.ChartItemEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import spark.events.IndexChangeEvent;
			
			[Dispatcher]
			public var dispatcher:IEventDispatcher;
			
			[Inject]
			[Bindable]
			public var service:LancamentoService;
			
			[Bindable]
			private var listaModos:ArrayCollection = new ArrayCollection([{label: "DiÃ¡rio"}
																		  , {label: "Mensal"}]);
			
			[EventHandler(event = "AppEvent.ATUALIZAR_DASHBOARD")]
			public function atualizar(event:ICustomEvent = null):void
			{
				dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent.LISTAR_PREVISAO_SALDO_DIARIO
															, barTrocaModo.selectedIndex +
															1));
			}
			
			private function barTrocaModo_changeHandler(event:IndexChangeEvent):void
			{
				dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent.LISTAR_PREVISAO_SALDO_DIARIO
															, event.newIndex + 1));
			}
			
			private function dataTipFunction(e:HitData):String
			{
				var s:String;
				
				s = barTrocaModo.selectedIndex == 0 ? DateUtil.formatSimple((e.item)
																			.dataCompensacao) :
					DateUtil.formatSimpleMonth((e.item).dataCompensacao);
				s += "\n Inicial: " + NumberUtil.formatNumber((e.item).saldoInicial
															  , 2);
				s += "\n Receitas: " + NumberUtil.formatNumber((e.item).receitas
															   , 2);
				s += "\n Despesas: " + NumberUtil.formatNumber((e.item).despesas
															   , 2);
				s += "\n Saldo: " + NumberUtil.formatNumber((e.item).saldoAcumulado
															, 2);
				return s;
			}
			
			private function displayData(item:Object, prevValue:Object, axis:CategoryAxis
										 , categoryItem:Object):String
			{
				return barTrocaModo.selectedIndex == 0 ? (item as Date).date.toString() :
					DateUtil.formatSimpleMonth(item as Date);
			}
			
			private function itemClickHandler(event:ChartItemEvent):void
			{
				var dto:LancamentoDto = new LancamentoDto();
				dto.tipoPeriodo = 3;
				dto.dataInicio = event.hitData.item.dataCompensacao;
				dto.dataFinal = barTrocaModo.selectedIndex == 0 ? event.hitData.item
					.dataCompensacao : DateUtil.lastDayOfMonth(event.hitData.item
															   .dataCompensacao.month
															   , event.hitData.item
															   .dataCompensacao.fullYear);
				dispatcher.dispatchEvent(new AppEvent(AppEvent.TO_TRANSACOES_DIA
													  , dto));
			}
			
			private function linearAxis_LabelFunction(item:Object, prevValue:Object
													  , axis:IAxis):String
			{
				return item.toString();
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<mx:SeriesInterpolate id = "slideIn"
							  duration = "1000"/>

		<mx:SeriesSlide id = "slideOut"
						duration = "1000"
						direction = "down"/>
	</fx:Declarations>

	<custom:CustomButtonBar id = "barTrocaModo"
							dataProvider = "{listaModos}"
							requireSelection = "true"
							height = "25"
							change = "barTrocaModo_changeHandler(event)"
							skinClass = "assets.skins.CustomButtonBarSkin"/>

	<s:Group width = "100%"
			 height = "100%">
		<mx:LineChart id = "linechart"
					  dataProvider = "{service.listaPrevisaoSaldoDiario}"
					  showDataTips = "true"
					  dataTipFunction = "{dataTipFunction}"
					  itemClick = "itemClickHandler(event)"
					  width = "100%"
					  height = "100%">
			<mx:horizontalAxis>
				<mx:CategoryAxis categoryField = "dataCompensacao"
								 labelFunction = "displayData"/>
			</mx:horizontalAxis>

			<mx:verticalAxis>
				<mx:LinearAxis id = "linearAxis"
							   labelFunction = "linearAxis_LabelFunction"/>
			</mx:verticalAxis>

			<mx:series>
				<mx:LineSeries displayName = "Saldo Acumulado"
							   yField = "saldoAcumulado"
							   form = "curve"
							   showDataEffect = "{slideIn}"
							   hideDataEffect = "{slideOut}"/>
			</mx:series>
		</mx:LineChart>

		<serviceFeedback:ServiceFeedback watchForCall = "listarPrevisaoSaldoDiario"
										 skinClass = "common.spark.component.serviceFeedback.skins.LoadingWithBGTextSkin"
										 width = "100%"
										 height = "100%"/>
	</s:Group>
</s:VGroup>
