<?xml version = "1.0" encoding = "utf-8"?>
<s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009"
			   xmlns:s = "library://ns.adobe.com/flex/spark"
			   xmlns:mx = "library://ns.adobe.com/flex/mx"
			   minWidth = "1280"
			   minHeight = "600"
			   xmlns:login = "gfp.view.login.*"
			   xmlns:home = "gfp.view.home.*"
			   xmlns:service = "gfp.service.*"
			   creationComplete = "creationCompleteHandler(event)"
			   creationPolicy = "all"
			   preloader = "common.spark.component.preloader.CustomPreloader"
			   backgroundColor = "#eef4fb"
			   xmlns:mxml = "org.swizframework.core.mxml.*"
			   xmlns:core = "org.swizframework.core.*"
			   xmlns:logging = "org.swizframework.utils.logging.*"
			   xmlns:services = "org.swizframework.utils.services.*">
	<fx:Script>
		<![CDATA[
			import assets.images.ImageUtil;
			
			import common.spark.component.tooltip.NiceToolTip;
			import common.util.AppUtil;
			import common.util.PopUpUtil;
			
			import gfp.event.AppEvent;
			import gfp.event.CategoriaEvent;
			import gfp.event.ContaEvent;
			import gfp.service.ApplicationService;
			import gfp.view.categoria.CategoriaForm;
			import gfp.view.conta.ContaForm;
			import gfp.view.transacao.TransacaoForm;
			
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			
			[Inject]
			[Bindable]
			public var applicationService:ApplicationService;
			
			[Dispatcher]
			public var dispatcher:IEventDispatcher;
			
			public var params:Object;
			
			[Inject]
			[Bindable]
			public var usuarioService:UsuarioService;
			
			[EventHandler(event = "CategoriaEvent.EDITAR")]
			public function toEditarCategoria():void
			{
				PopUpUtil.createAndCenter(this, CategoriaForm, dispatcher);
			}
			
			[EventHandler(event = "ContaEvent.EDITAR")]
			public function toEditarConta():void
			{
				PopUpUtil.createAndCenter(this, ContaForm, dispatcher);
			}
			
			[EventHandler(event = "TransacaoEvent.EDITAR")]
			public function toEditarTransacao():void
			{
				PopUpUtil.createAndCenter(this, TransacaoForm, dispatcher);
			}
			
			[EventHandler(event = "AppEvent.TO_HOME")]
			public function toHome():void
			{
				stackMain.selectedChild = navigatorHome;
				carregarCadastrosBasicos();
				dispatcher.dispatchEvent(new AppEvent(AppEvent.ATUALIZAR_DASHBOARD));
			}
			
			private function carregarCadastrosBasicos():void
			{
				dispatcher.dispatchEvent(new ContaEvent(ContaEvent.LISTAR));
				dispatcher.dispatchEvent(new CategoriaEvent(CategoriaEvent.LISTAR));
			}
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				params = AppUtil.urlParams();
				new NiceToolTip();
				toLogin();
			}
			
			private function logoff():void
			{
				var ref:URLRequest = new URLRequest("javascript:location.reload(true)");
				navigateToURL(ref, "_self");
			}
			
			private function showLoginFormEffect_effectEndHandler(event:EffectEvent):void
			{
				if (ExternalInterface.available)
				{
					ExternalInterface.call('eval', 'document.getElementById(\'Main\').tabIndex=0');
					ExternalInterface.call('eval', 'document.getElementById(\'Main\').focus()');
				}
				
				loginForm.textUsuario.setFocus();
			}
			
			private function toLogin():void
			{
				stackMain.selectedChild = navigatorLogin;
				showLoginFormEffect.play();
			}
		]]>
	</fx:Script>

	<fx:Style source = "assets/css/Main.css"/>

	<fx:Declarations>
		<mxml:Swiz>
			<mxml:config>
				<core:SwizConfig eventPackages = "gfp.event.*"/>
			</mxml:config>

			<mxml:loggingTargets>
				<logging:SwizTraceTarget/>
			</mxml:loggingTargets>

			<mxml:beanProviders>
				<core:BeanProvider>
					<service:ApplicationService/>

					<service:UsuarioService/>

					<service:ContaService/>

					<service:CategoriaService/>

					<service:LancamentoService/>

					<service:BancoService/>

					<services:ServiceHelper/>
				</core:BeanProvider>
			</mxml:beanProviders>
		</mxml:Swiz>

		<s:Fade id = "showLoginFormEffect"
				target = "{navigatorLogin}"
				duration = "1000"
				alphaFrom = "0"
				alphaTo = "1"
				effectEnd = "showLoginFormEffect_effectEndHandler(event)"/>

		<s:GlowFilter id = "filterGlow"
					  color = "#ffffff"
					  alpha = "1"
					  quality = "1"/>
	</fx:Declarations>

	<s:VGroup width = "100%"
			  height = "100%">
		<s:BorderContainer id = "groupHeader"
						   width = "100%"
						   height = "80"
						   backgroundImage = "@Embed('/assets/images/header-glow.png')">
			<s:HGroup width = "100%"
					  paddingTop = "5"
					  paddingLeft = "5"
					  paddingRight = "10"
					  verticalAlign = "middle">
				<s:Image source = "{ImageUtil.LOGO}"
						 toolTip = "Versão {applicationService.versaoAtual}"/>

				<s:Label text = "Gerente Financeiro Pessoal"
						 fontFamily = "Title"
						 fontSize = "28"
						 color = "#FFFFFF">
					<s:filters>
						<s:DropShadowFilter distance = "1"
											quality = "1"/>
					</s:filters>
				</s:Label>

				<mx:Spacer width = "100%"/>

				<s:HGroup id = "groupStatusUsuario"
						  verticalAlign = "middle"
						  visible = "{stackMain.selectedChild != navigatorLogin}">
					<s:Label text = "{usuarioService.usuarioLogado.nome}"
							 color = "#FFFFFF"/>

					<s:Image id = "imageSair"
							 source = "{ImageUtil.CLOSE}"
							 click = "logoff()"
							 buttonMode = "true"
							 useHandCursor = "true"
							 toolTip = "Encerrar esta sessão."
							 mouseOver = "{imageSair.filters = [filterGlow]}"
							 mouseOut = "{imageSair.filters = []}"/>
				</s:HGroup>
			</s:HGroup>
		</s:BorderContainer>

		<mx:ViewStack id = "stackMain"
					  width = "100%"
					  height = "100%"
					  paddingLeft = "5"
					  paddingRight = "5"
					  paddingBottom = "5">
			<s:NavigatorContent id = "navigatorLogin"
								width = "100%"
								height = "100%">
				<login:LoginForm id = "loginForm"
								 verticalCenter = "0"
								 horizontalCenter = "0"/>
			</s:NavigatorContent>

			<s:NavigatorContent id = "navigatorHome"
								width = "100%"
								height = "100%">
				<home:HomeView id = "homeView"
							   width = "100%"
							   height = "100%"/>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
</s:Application>
