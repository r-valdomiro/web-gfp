<?xml version = "1.0" encoding = "utf-8"?>
<s:VGroup xmlns:fx = "http://ns.adobe.com/mxml/2009"
		  xmlns:s = "library://ns.adobe.com/flex/spark"
		  xmlns:mx = "library://ns.adobe.com/flex/mx"
		  xmlns:custom = "common.spark.component.*"
		  width = "100%"
		  height = "100%"
		  horizontalAlign = "center">
	<fx:Script>
		<![CDATA[
			import common.custom.ICustomEvent;
			import common.util.DateUtil;
			import common.util.NumberUtil;
			
			import gfp.dto.LancamentoDto;
			import gfp.event.AppEvent;
			import gfp.event.TransacaoEvent;
			import gfp.service.LancamentoService;
			
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Dispatcher]
			public var dispatcher:IEventDispatcher;
			
			public var grafico:GraficoTemplate;
			
			[Inject]
			[Bindable]
			public var service:LancamentoService;
			
			private function get chartData():ArrayCollection
			{
				var result:ArrayCollection = new ArrayCollection();
				
				if (service.listaPrevisaoSaldoDiario && service.listaPrevisaoSaldoDiario
					.length > 0)
				{
					var dto:Object;
					var sLink:String;
					var sTooltip:String;
					
					saldoNegativo = 0;
					saldoNegativoDias = 0;
					saldoPositivo = 0;
					saldoPositivoDias = 0;
					
					for each (dto in service.listaPrevisaoSaldoDiario)
					{
						if (dto.saldoAcumulado < saldoNegativo)
						{
							saldoNegativo = dto.saldoAcumulado;
						}
						
						if (dto.saldoAcumulado < 0)
						{
							saldoNegativoDias++;
						}
						
						if (dto.saldoAcumulado > saldoPositivo)
						{
							saldoPositivo = dto.saldoAcumulado;
						}
						
						if (dto.saldoAcumulado > 0)
						{
							saldoPositivoDias++;
						}
						
						sTooltip = barTrocaModo.selectedIndex == 0 ? DateUtil.formatSimple(dto
																						   .dataCompensacao)
							: DateUtil.formatSimpleMonthYear(dto.dataCompensacao);
						sTooltip += "{br}Inicial: " + NumberUtil.formatNumber(dto
																			  .saldoInicial
																			  , 2);
						sTooltip += "{br}Receitas: " + NumberUtil.formatNumber(dto
																			   .receitas
																			   , 2);
						sTooltip += "{br}Despesas: " + NumberUtil.formatNumber(dto
																			   .despesas
																			   , 2);
						sTooltip += "{br}" + (barTrocaModo.selectedIndex == 0 ? "Dia"
							: "Mês") + ": " + NumberUtil.formatNumber(dto.receitas
																	  - dto.despesas
																	  , 2);
						sTooltip += "{br}Acumulado: " + NumberUtil.formatNumber(dto
																				.saldoAcumulado
																				, 2);
						sLink = "E-itemClickHandler," + service.listaPrevisaoSaldoDiario
							.getItemIndex(dto);
						
						result.addItem({label: barTrocaModo.selectedIndex == 0 ? dto
											   .dataCompensacao.date.toString() : DateUtil
											   .formatSimpleMonthYear(dto.dataCompensacao)
										   , value: dto.saldoAcumulado, tooltext: sTooltip
										   , link: sLink});
					}
				}
				
				return result;
			}
			
			private function get chartParams():ArrayCollection
			{
				var result:ArrayCollection = new ArrayCollection();
				
				if (service.listaPrevisaoSaldoDiario && service.listaPrevisaoSaldoDiario
					.length > 0)
				{
					var params:Object = new Object();
					params.showValues = barTrocaModo.selectedIndex == 0 ? "0" : "1";
					params.forceDecimals = "0";
					params.formatNumber = "1";
					params.formatNumberScale = "0";
					params.decimals = "0";
					params.thousandSeparator = ".";
					params.decimalSeparator = ",";
					params.bgColor = "#eef4fb";
					params.baseFontColor = "#2074A3";
					params.toolTipBorderColor = "#2074A3";
					params.showBorder = "0";
					params.rotateLabels = "1";
					params.slantLabels = "1";
					params.divLineIsDashed = "1";
					params.palette = "3";
					params.showAlternateHGridColor = "0";
					params.caption = "Saldo Previsto";
					params.subCaption = "Próximos " + (barTrocaModo.selectedIndex
						== 0 ? "45 dias" : "12 meses");
					result.addItem(params);
				}
				
				return result;
			}
			
			private function get chartTrend():ArrayCollection
			{
				var result:ArrayCollection = new ArrayCollection();
				
				if (service.listaPrevisaoSaldoDiario && service.listaPrevisaoSaldoDiario
					.length > 0)
				{
					var params:Object;
					
					if (saldoPositivo > 0)
					{
						params = new Object();
						params.startValue = "0";
						params.endValue = saldoPositivo.toString();
						params.showOnTop = "0";
						params.isTrendZone = "1";
						params.displayValue = "{br}Máx. " + NumberUtil.formatNumber(params
																					.endValue
																					, 0)
							+ (saldoPositivoDias > 0 ? " " + saldoPositivoDias + (barTrocaModo
							.selectedIndex == 0 ? "d" : "m") : "");
						params.color = "37a865";
						params.alpha = "5";
						result.addItem(params);
					}
					
					if (saldoNegativo < 0)
					{
						params = new Object();
						params.startValue = "0";
						params.endValue = saldoNegativo.toString();
						params.showOnTop = "0";
						params.isTrendZone = "1";
						params.displayValue = "{br}Min. " + NumberUtil.formatNumber(params
																					.endValue
																					, 0)
							+ (saldoNegativoDias > 0 ? " " + saldoNegativoDias + (barTrocaModo
							.selectedIndex == 0 ? "d" : "m") : "");
						params.color = "bd0000";
						params.alpha = "5";
						result.addItem(params);
					}
				}
				
				return result;
			}
			
			[Bindable]
			private var listaModos:ArrayCollection = new ArrayCollection([{label: "Diário"}
																		  , {label: "Mensal"}]);
			
			private var saldoNegativo:Number;
			
			private var saldoNegativoDias:int = 0;
			
			private var saldoPositivo:Number;
			
			private var saldoPositivoDias:int = 0;
			
			[EventHandler(event = "AppEvent.ATUALIZAR_DASHBOARD")]
			public function atualizar(event:ICustomEvent = null):void
			{
				dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent.LISTAR_PREVISAO_SALDO_DIARIO
															, barTrocaModo.selectedIndex
															+ 1, atualizar_Handler));
			}
			
			public function itemClickHandler(index:int):void
			{
				var item:Object = service.listaPrevisaoSaldoDiario.getItemAt(index);
				
				var dto:LancamentoDto = new LancamentoDto();
				dto.tipoPeriodo = 3;
				dto.dataInicio = item.dataCompensacao;
				dto.dataFinal = barTrocaModo.selectedIndex == 0 ? item.dataCompensacao
					: DateUtil.lastDayOfMonth(item.dataCompensacao.month, item.dataCompensacao
											  .fullYear);
				dispatcher.dispatchEvent(new AppEvent(AppEvent.TO_TRANSACOES_DIA
													  , dto));
			}
			
			private function atualizar_Handler(re:ResultEvent):void
			{
				callLater(updateChart);
			}
			
			private function barTrocaModo_changeHandler(event:IndexChangeEvent):void
			{
				dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent.LISTAR_PREVISAO_SALDO_DIARIO
															, event.newIndex + 1
															, atualizar_Handler));
			}
			
			private function updateChart():void
			{
				if (grafico)
				{
					removeElement(grafico);
				}
				
				grafico = new GraficoTemplate();
				addElement(grafico);
				grafico.render(this, GraficoTemplate.TypeLine, chartParams, chartData
							   , chartTrend);
			}
		]]>
	</fx:Script>

	<custom:CustomButtonBar id = "barTrocaModo"
							dataProvider = "{listaModos}"
							requireSelection = "true"
							height = "25"
							change = "barTrocaModo_changeHandler(event)"
							skinClass = "assets.skins.CustomButtonBarSkin"/>
</s:VGroup>
