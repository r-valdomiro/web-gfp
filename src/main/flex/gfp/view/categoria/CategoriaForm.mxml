<?xml version = "1.0" encoding = "utf-8"?>
<s:Panel xmlns:fx = "http://ns.adobe.com/mxml/2009"
		 xmlns:s = "library://ns.adobe.com/flex/spark"
		 xmlns:mx = "library://ns.adobe.com/flex/mx"
		 creationCompleteEffect = "{fadeIn}"
		 xmlns:serviceFeedback = "common.spark.component.serviceFeedback.*"
		 skinClass = "assets.skins.CustomPanelSkin"
		 title = "Categoria"
		 xmlns:custom = "common.components.custom.*"
		 xmlns:component = "common.spark.component.*">
	<fx:Script>
		<![CDATA[
			import common.component.validator.RequiredValidator;
			import common.custom.CustomEvent;
			import common.spark.component.serviceFeedback.skins.LoadingWithBGTextSkin;
			import common.util.DateUtil;
			import common.util.MessageUtil;
			
			import gfp.event.AppEvent;
			import gfp.event.CategoriaEvent;
			import gfp.event.TransacaoEvent;
			import gfp.service.BancoService;
			import gfp.service.CategoriaService;
			import gfp.service.LancamentoService;
			import gfp.type.CategoriaType;
			
			import mx.collections.ArrayCollection;
			import mx.controls.DateField;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.effects.Fade;
			
			public var dispatcher:IEventDispatcher;
			
			[Bindable]
			[Inject]
			public var service:CategoriaService;
			
			private var changed:Boolean = false;
			
			private function cancelar():void
			{
				fadeOut.play([this]);
			}
			
			private function fadeOut_effectEndHandler(event:EffectEvent):void
			{
				PopUpManager.removePopUp(this);
				
				if (changed)
				{
					dispatcher.dispatchEvent(new AppEvent(AppEvent.ATUALIZAR_DASHBOARD));
					dispatcher.dispatchEvent(new AppEvent(AppEvent.TO_CADASTROS));
				}
			}
			
			private function salvar():void
			{
				if (validateForm())
				{
					dispatcher.dispatchEvent(new CategoriaEvent(CategoriaEvent.SALVAR
																, service.selecionada
																, function(re:ResultEvent):void
																{
																	changed = true;
																	cancelar();
																}));
				}
			}
			
			private function validateForm():Boolean
			{
				var result:Boolean = RequiredValidator.validate(RequiredValidator
																.STRING, [textDescricao]
																, dispatcher);
				
				service.selecionada.tipo = radioReceita.selected ? CategoriaType
					.RECEITA : CategoriaType.DESPESA;
				
				return result;
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:Parallel id = "fadeIn"
					target = "{this}"
					duration = "500"
					effectEnd = "textDescricao.setFocus()">
			<mx:Zoom zoomWidthFrom = "1.5"
					 zoomHeightFrom = "1.5"/>

			<s:Fade alphaFrom = "0"
					alphaTo = "1"/>
		</s:Parallel>

		<s:Parallel id = "fadeOut"
					target = "{this}"
					duration = "300"
					effectEnd = "fadeOut_effectEndHandler(event)">
			<mx:Zoom zoomWidthTo = "1.5"
					 zoomHeightTo = "1.5"/>

			<s:Fade alphaFrom = "1"
					alphaTo = "0"/>
		</s:Parallel>
	</fx:Declarations>

	<s:VGroup id = "form"
			  width = "100%">
		<s:HGroup>
			<s:RadioButton id = "radioReceita"
						   label = "Receita"
						   selected = "{service.selecionada.tipo == CategoriaType.RECEITA}"/>

			<s:RadioButton label = "Despesa"
						   selected = "{service.selecionada.tipo == CategoriaType.DESPESA}"/>
		</s:HGroup>

		<s:Label text = "Descrição:"/>

		<s:TextInput id = "textDescricao"
					 text = "@{service.selecionada.descricao}"
					 width = "250"/>

		<s:CheckBox id = "checkTransferencia"
					selected = "@{service.selecionada.transferencia}"
					label = "Transferência entre contas"/>

		<s:CheckBox id = "checkConciliada"
					selected = "@{service.selecionada.estatistica}"
					label = "{checkConciliada.selected ? 'Conciliada' : 'Não Conciliada'}"/>

		<s:HGroup width = "100%"
				  horizontalAlign = "center">
			<component:CustomButton label = "Cancelar"
									click = "cancelar()"
									styleName = "styleButtonRed"/>

			<component:CustomButton label = "Salvar"
									click = "salvar()"
									styleName = "styleButtonGreen"/>
		</s:HGroup>
	</s:VGroup>

	<serviceFeedback:ServiceFeedback watchForCall = "salvarCategoria"
									 skinClass = "common.spark.component.serviceFeedback.skins.LoadingWithBGTextSkin"
									 width = "100%"
									 height = "100%"/>
</s:Panel>
