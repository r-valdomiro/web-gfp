<?xml version = "1.0" encoding = "utf-8"?>
<s:Panel xmlns:fx = "http://ns.adobe.com/mxml/2009"
		 xmlns:s = "library://ns.adobe.com/flex/spark"
		 xmlns:mx = "library://ns.adobe.com/flex/mx"
		 xmlns:transacao = "gfp.view.transacao.*"
		 xmlns:serviceFeedback = "common.spark.component.serviceFeedback.*"
		 skinClass = "assets.skins.CustomPanelSkin"
		 title = "Transação"
		 creationComplete = "creationCompleteHandler(event)"
		 creationCompleteEffect = "{fadeIn}"
		 currentState = "Principal"
		 stateChangeComplete = "stateChangeCompleteHandler(event)"
		 resizeEffect = "{mx.effects.Resize}"
		 xmlns:component = "common.spark.component.*">
	<fx:Script>
		<![CDATA[
			import common.component.validator.RequiredValidator;
			import common.spark.component.serviceFeedback.skins.LoadingWithBGTextSkin;
			import common.util.DateUtil;
			import common.util.MessageEvent;
			import common.util.MessageUtil;
			import common.util.NumberUtil;
			import common.util.StringUtil;
			
			import gfp.dto.AgendamentoDto;
			import gfp.dto.LancamentoDto;
			import gfp.event.AppEvent;
			import gfp.event.CategoriaEvent;
			import gfp.event.TransacaoEvent;
			import gfp.model.Categoria;
			import gfp.model.Conta;
			import gfp.model.Lancamento;
			import gfp.service.CategoriaService;
			import gfp.service.ContaService;
			import gfp.service.LancamentoService;
			import gfp.service.UsuarioService;
			import gfp.type.CategoriaType;
			import gfp.type.FormaPagamentoType;
			
			import mx.collections.ArrayCollection;
			import mx.controls.DateField;
			import mx.effects.Move;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import org.swizframework.processors.DispatcherProcessor;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			[Inject]
			public var categoriaServcie:CategoriaService;
			
			[Inject]
			[Bindable]
			public var contaService:ContaService;
			
			public var dispatcher:IEventDispatcher;
			
			[Bindable]
			public var dto:AgendamentoDto;
			
			[Bindable]
			[Inject]
			public var service:LancamentoService;
			
			[Inject]
			public var usuarioService:UsuarioService;
			
			private var changed:Boolean = false;
			
			private function get pagamentoComCartaoDeCredito():Boolean
			{
				return service.selecionado.formaPagamento == FormaPagamentoType.CREDITO_MASTERCARD
					|| service.selecionado.formaPagamento == FormaPagamentoType.CREDITO_VISA;
			}
			
			[Bindable]
			private var periodicidadesAgendamento:ArrayCollection = new ArrayCollection([{data: 1
																							 , label: "Diária"}
																						 , {data: 2
																							 , label: "Semanal"}
																						 , {data: 3
																							 , label: "Quinzenal"}
																						 , {data: 4
																							 , label: "Mensal"}
																						 , {data: 5
																							 , label: "Dia Útil do Mês"}]);
			
			[Bindable(event = "permiteRepetir")]
			private function get permiteRepetir():Boolean
			{
				if (comboCategorias.selectedItem)
				{
					service.selecionado.categoria = comboCategorias.selectedItem
						as Categoria;
					
					if (!service.selecionado.categoria.transferencia)
					{
						carregarSaldoRemanescente();
					}
					else
					{
						labelRemanescente.visible = false;
					}
				}
				
				return comboCategorias.selectedItem is Categoria && service.selecionado
					.valorOriginal > 0;
			}
			
			[Bindable(event = "permiteTransferir")]
			private function get permiteTransferir():Boolean
			{
				if (service == null || service.selecionado == null || !(comboCategorias
					.selectedItem is Categoria))
				{
					return false;
				}
				
				service.selecionado.calcularDataPrevisaoPagamento();
				
				var result:Boolean = comboCategorias.selectedItem.transferencia;
				
				if (!result)
				{
					comboContaTransferencia.selectedItem = null;
					service.selecionado.contaTransferencia = null;
				}
				else if (comboContaTransferencia.selectedItem == null || comboContaTransferencia
					.selectedItem.id == service.selecionado.conta.id)
				{
					for each (var conta:Conta in comboContaTransferencia.dataProvider)
					{
						if ((service.selecionado.contaTransferencia && conta.id == service
							.selecionado.contaTransferencia.id) || (!service.selecionado
							.contaTransferencia && conta.id != service.selecionado
							.conta.id))
						{
							comboContaTransferencia.selectedItem = conta;
							service.selecionado.contaTransferencia = conta as Conta;
							break;
						}
					}
				}
				
				return result;
			}
			
			private function buttonRepetir_clickHandler(event:MouseEvent):void
			{
				if (validateForm(false))
				{
					currentState = "Agendamento";
					dto.dataInicio = dto.lancamento.dataVencimento;
					dto.dataFinal = DateUtil.addMonth(!pagamentoComCartaoDeCredito
													  ? dto.dataInicio : dto.lancamento
													  .dataPrevisaoPagamento, 1);
					dto.dia = !pagamentoComCartaoDeCredito ? dto.dataInicio.date
						: dto.lancamento.dataPrevisaoPagamento.date;
					
					comboFrequencia.enabled = !pagamentoComCartaoDeCredito;
					stepperDia.enabled = !pagamentoComCartaoDeCredito;
					groupAntecipaFS.visible = !pagamentoComCartaoDeCredito;
					
					if (stepperDia.enabled)
					{
						stepperDia.setFocus();
					}
					else
					{
						textDataFinal.setFocus();
					}
				}
			}
			
			private function cancelar():void
			{
				currentState == "Principal" ? fadeOut.play([this]) : currentState = "Principal";
			}
			
			private function carregarSaldoRemanescente():void
			{
				dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent.OBTER_SALDO_REMANESCENTE
															, null, function(re:ResultEvent):void
															{
																labelRemanescente
																	.visible = comboCategorias
																	.selectedItem
																	!= null;
																
																var diasRestantes:int
																	=  DateUtil.compareDate(DateUtil
																							.lastDayOfMonth(service
																											.selecionado
																											.dataPrevisaoPagamento
																											.month
																											, service
																											.selecionado
																											.dataPrevisaoPagamento
																											.fullYear)
																							, DateUtil
																							.today);
																
																labelRemanescente
																	.text = "Saldo Remanescente: "
																	+ NumberUtil
																	.formatMoney(re
																				 .result
																				 as Number)
																	+ (re.result
																	as Number > 0
																	? " :: " + diasRestantes
																	+ " " + StringUtil
																	.pluralize("dia"
																			   , diasRestantes)
																	+ " " + StringUtil
																	.pluralize("restante"
																			   , diasRestantes)
																	: "");
																
																labelRemanescente
																	.setStyle("color"
																			  , re
																			  .result
																			  as Number
																			  <= 0
																			  ? 0xff0000
																			  : 0x138b0d);
															}));
			}
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				selecaoFormaPagamentoRecebimento.init(service.selecionado);
				comboCategorias.selectedItem = service.selecionado.categoria;
				dispatchEvent(new Event("permiteRepetir"));
				dispatchEvent(new Event("permiteTransferir"));
			}
			
			private function dateVencimento_changeHandler(event:CalendarLayoutChangeEvent):void
			{
				service.selecionado.dataPrevisaoPagamento = event.target.selectedDate;
				service.selecionado.calcularDataPrevisaoPagamento();
				dispatchEvent(new Event('permiteRepetir'));
			}
			
			private function efetivarTransacao():void
			{
				service.selecionado.dataPagamento = service.selecionado.dataPrevisaoPagamento;
				salvar();
			}
			
			private function fadeOut_effectEndHandler(event:EffectEvent):void
			{
				PopUpManager.removePopUp(this);
				
				if (changed)
				{
					dispatcher.dispatchEvent(new AppEvent(AppEvent.ATUALIZAR_DASHBOARD));
					dispatcher.dispatchEvent(new AppEvent(AppEvent.TO_TRANSACOES));
				}
			}
			
			private function prepararPagamento():void
			{
				service.selecionado.dataPagamento = DateUtil.today;
				salvar();
			}
			
			private function salvar():void
			{
				if (validateForm())
				{
					if (currentState == "Principal")
					{
						dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent
																	.SALVAR, service
																	.selecionado
																	, function(re:ResultEvent):void
																	{
																		changed = true;
																		cancelar();
																	}));
					}
					else
					{
						dto.lancamento.valorOriginal = dto.valor;
						dispatcher.dispatchEvent(new TransacaoEvent(TransacaoEvent
																	.AGENDAR, dto
																	, function(re:ResultEvent):void
																	{
																		changed = true;
																		var agendamentos:ArrayCollection
																			= re
																			.result
																			as ArrayCollection;
																		currentState = "Principal";
																		
																		var _dto:LancamentoDto
																			= new LancamentoDto();
																		_dto.tipoPeriodo = 1;
																		_dto.dataInicio = (agendamentos[0]
																			as Lancamento)
																			.dataPrevisaoPagamento;
																		_dto.dataFinal = (agendamentos[agendamentos
																			.length
																			- 1]
																			as Lancamento)
																			.dataPrevisaoPagamento;
																		_dto.categoria = dto
																			.lancamento
																			.categoria
																			.id;
																		dispatcher
																			.dispatchEvent(new AppEvent(AppEvent
																										.TO_TRANSACOES_DIA
																										, _dto));
																		
																		cancelar();
																	}));
					}
				}
			}
			
			private function stateChangeCompleteHandler(event:FlexEvent):void
			{
				dispatchEvent(new Event("permiteTransferir"));
				dispatchEvent(new Event("permiteRepetir"));
			}
			
			private function validateForm(save:Boolean = true):Boolean
			{
				if (!dto || dto.valor == 0)
				{
					dto = new AgendamentoDto();
					dto.lancamento = service.selecionado;
					dto.valor = dto.lancamento.valorOriginal;
				}
				
				if (!(comboCategorias.selectedItem is Categoria))
				{
					if (comboCategorias.textInput.text.length > 0)
					{
						comboCategorias.validate(save ? salvar : validateForm);
					}
					else
					{
						RequiredValidator.validate(RequiredValidator.SELECTION, [comboCategorias]
												   , dispatcher);
					}
					
					return false;
				}
				
				service.selecionado.categoria = comboCategorias.selectedItem as Categoria;
				
				var result:Boolean = RequiredValidator.validate(RequiredValidator
																.SELECTION, [comboCategorias]
																, dispatcher);
				
				if (result)
				{
					result = RequiredValidator.validate(RequiredValidator.NUMBER
														, [textValorOriginal, textValorAgendamento]
														, dispatcher, .01);
				}
				
				if (result && service.selecionado.categoria.transferencia)
				{
					result = RequiredValidator.validate(RequiredValidator.SELECTION
														, [comboContaTransferencia]
														, dispatcher);
				}
				
				service.selecionado.contaTransferencia = comboContaTransferencia
					.selectedItem as Conta;
				
				if (service.selecionado.contaTransferencia != null && service.selecionado
					.formaPagamento == FormaPagamentoType.CHEQUE)
				{
					dispatcher.dispatchEvent(new MessageEvent("Transferências só podem ser efetuadas em Dinheiro ou Cartão"
															  , this));
					result = false;
				}
				else if (service.selecionado.contaTransferencia != null && service
					.selecionado.contaTransferencia.id == service.selecionado.conta
					.id)
				{
					dispatcher.dispatchEvent(new MessageEvent("Transferências só podem ser efetuadas para contas diferentes"
															  , this));
					result = false;
				}
				
				return result;
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name = "Principal"/>

		<s:State name = "Agendamento"/>
	</s:states>

	<fx:Declarations>
		<s:Parallel id = "fadeIn"
					target = "{this}"
					duration = "500"
					effectEnd = "comboCategorias.setFocus()">
			<mx:Zoom zoomWidthFrom = "1.5"
					 zoomHeightFrom = "1.5"/>

			<s:Fade alphaFrom = "0"
					alphaTo = "1"/>
		</s:Parallel>

		<s:Parallel id = "fadeOut"
					target = "{this}"
					duration = "300"
					effectEnd = "fadeOut_effectEndHandler(event)">
			<mx:Zoom zoomWidthTo = "1.5"
					 zoomHeightTo = "1.5"/>

			<s:Fade alphaFrom = "1"
					alphaTo = "0"/>
		</s:Parallel>
	</fx:Declarations>

	<s:VGroup id = "form"
			  width = "100%">
		<s:HGroup width = "100%">
			<s:Label text = "Categoria:"/>

			<s:Label id = "labelRemanescente"
					 width = "100%"
					 textAlign = "right"/>
		</s:HGroup>

		<transacao:CategoriaListInput id = "comboCategorias"
									  dataProvider = "{categoriaServcie.list}"
									  change = "dispatchEvent(new Event('permiteRepetir')); dispatchEvent(new Event('permiteTransferir'));"
									  width = "100%"
									  enabled.Agendamento = "false"/>

		<s:HGroup width = "100%"
				  gap = "10">
			<s:VGroup>
				<s:Label text = "Vencimento:"/>

				<component:CustomDateField id = "dateVencimento"
										   selectedDate = "@{service.selecionado.dataVencimento}"
										   change = "dateVencimento_changeHandler(event)"
										   editable = "false"
										   enabled.Agendamento = "false"
										   tabFocusEnabled = "false"/>
			</s:VGroup>

			<s:VGroup>
				<s:Label text = "Valor:"/>

				<component:TextInputNumeric id = "textValorOriginal"
											value = "@{service.selecionado.valorOriginal}"
											change = "dispatchEvent(new Event('permiteRepetir'))"
											enabled.Agendamento = "false"/>
			</s:VGroup>
		</s:HGroup>

		<s:Label text = "Forma de Pagamento / Recebimento:"/>

		<transacao:SelecaoFormaPagamentoRecebimentoRenderer id = "selecaoFormaPagamentoRecebimento"
															width = "{(selecaoFormaPagamentoRecebimento.dataProvider as ArrayCollection).length > 5 ? 617 : 602}"
															height = "80"
															enabled.Agendamento = "false"
															change = "dispatchEvent(new Event('permiteRepetir')); dispatchEvent(new Event('permiteTransferir'));"/>

		<s:Label text = "Transferir para:"
				 visible = "{permiteTransferir}"
				 includeInLayout = "{permiteTransferir}"/>

		<s:DropDownList id = "comboContaTransferencia"
						dataProvider = "{contaService.list}"
						width = "100%"
						visible = "{permiteTransferir}"
						includeInLayout = "{permiteTransferir}"/>

		<s:Label text = "Observação:"/>

		<s:TextInput text = "@{service.selecionado.observacao}"
					 width = "100%"
					 enabled.Agendamento = "false"/>

		<mx:HRule width = "100%"/>

		<s:VGroup id = "groupParcelamento"
				  width = "100%"
				  visible.Agendamento = "false"
				  includeInLayout.Agendamento = "false"
				  showEffect = "{mx.effects.Fade}">
			<s:Label text = "Parcela:"
					 visible = "{service.selecionado.id != null}"
					 includeInLayout = "{service.selecionado.id != null}"/>

			<s:HGroup verticalAlign = "middle"
					  visible = "{service.selecionado.id != null}"
					  includeInLayout = "{service.selecionado.id != null}">
				<s:NumericStepper value = "@{service.selecionado.parcelaNumero}"
								  minimum = "1"
								  maximum = "100"
								  stepSize = "1"/>

				<s:Label text = "de"/>

				<s:NumericStepper value = "@{service.selecionado.parcelaQuantidade}"
								  minimum = "1"
								  maximum = "100"
								  stepSize = "1"/>
			</s:HGroup>

			<s:HGroup width = "100%"
					  gap = "10">
				<s:VGroup>
					<s:Label text = "Previsão Pagto:"/>

					<component:CustomDateField id = "datePrevisaoPagamento"
											   selectedDate = "@{service.selecionado.dataPrevisaoPagamento}"
											   change = "dispatchEvent(new Event('permiteRepetir'))"
											   enabled = "{!(service.selecionado.formaPagamento >= FormaPagamentoType.CREDITO_MASTERCARD)}"
											   editable = "false"
											   tabFocusEnabled = "false"/>
				</s:VGroup>

				<s:VGroup>
					<s:Label text = "Pagamento:"/>

					<component:CustomDateField selectedDate = "@{service.selecionado.dataPagamento}"
											   editable = "false"
											   disabledRanges = "{[{rangeStart: DateUtil.add(new Date(), 1)}]}"
											   tabFocusEnabled = "false"/>
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>

		<s:VGroup width = "100%"
				  visible.Principal = "false"
				  includeInLayout.Principal = "false"
				  showEffect = "{mx.effects.Fade}">
			<s:HGroup width = "100%"
					  gap = "10">
				<s:VGroup width = "100%">
					<s:Label text = "Frequência:"/>

					<s:DropDownList id = "comboFrequencia"
									dataProvider = "{AgendamentoDto.frequencias}"
									selectedIndex = "@{dto.frequencia}"
									width = "100%"/>
				</s:VGroup>

				<s:VGroup>
					<s:Label text = "Dia:"/>

					<s:NumericStepper id = "stepperDia"
									  value = "@{dto.dia}"
									  minimum = "1"
									  maximum = "{dto.frequencia == 0 ? 28 : 22}"/>
				</s:VGroup>

				<s:VGroup>
					<s:Label text = "Até:"/>

					<component:CustomDateField id = "textDataFinal"
											   selectedDate = "@{dto.dataFinal}"
											   selectableRange = "{{rangeStart:dto.dataInicio}}"
											   tabFocusEnabled = "false"/>
				</s:VGroup>

				<s:VGroup>
					<s:Label text = "Valor:"/>

					<component:TextInputNumeric id = "textValorAgendamento"
												value = "@{dto.valor}"/>
				</s:VGroup>
			</s:HGroup>

			<s:VGroup id = "groupAntecipaFS"
					  height = "100%"
					  verticalAlign = "bottom"
					  paddingBottom = "5">
				<s:CheckBox selected = "@{dto.anteciparFinaisSemana}"
							label = "Antecipar em finais de semana"
							visible = "{dto.frequencia == 0}"
							tabFocusEnabled = "false"/>
			</s:VGroup>
		</s:VGroup>

		<mx:HRule width = "100%"/>

		<s:HGroup width = "100%"
				  horizontalAlign = "center">
			<component:CustomButton id = "buttonEfetivar"
									label = "Efetivar"
									click = "efetivarTransacao()"
									styleName = "styleButtonCheck"
									visible.Principal = "{permiteRepetir}"
									visible.Agendamento = "false"
									includeInLayout.Principal = "{permiteRepetir}"
									includeInLayout.Agendamento = "false"
									showEffect = "{mx.effects.Fade}"
									hideEffect = "{mx.effects.Fade}"/>

			<component:CustomButton id = "buttonRepetir"
									label = "Repetir"
									click = "buttonRepetir_clickHandler(event)"
									styleName = "styleButtonAdd"
									visible.Principal = "{permiteRepetir}"
									visible.Agendamento = "false"
									includeInLayout.Principal = "{permiteRepetir}"
									includeInLayout.Agendamento = "false"
									showEffect = "{mx.effects.Fade}"
									hideEffect = "{mx.effects.Fade}"/>

			<component:CustomButton label = "Cancelar"
									click = "cancelar()"
									styleName = "styleButtonCancel"
									moveEffect = "{mx.effects.Move}"/>

			<component:CustomButton label.Principal = "Salvar"
									label.Agendamento = "Gerar"
									click = "salvar()"
									styleName = "styleButtonCheck"
									moveEffect = "{mx.effects.Move}"/>
		</s:HGroup>
	</s:VGroup>

	<serviceFeedback:ServiceFeedback watchForCall = "salvarLancamento"
									 skinClass = "common.spark.component.serviceFeedback.skins.LoadingWithBGTextSkin"
									 width = "100%"
									 height = "100%"/>

	<serviceFeedback:ServiceFeedback watchForCall = "agendarLancamentos"
									 skinClass = "common.spark.component.serviceFeedback.skins.LoadingWithBGTextSkin"
									 width = "100%"
									 height = "100%"/>
</s:Panel>
