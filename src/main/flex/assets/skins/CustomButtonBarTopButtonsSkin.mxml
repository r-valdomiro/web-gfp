<?xml version = "1.0" encoding = "utf-8"?>

<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2008 Adobe Systems Incorporated
	All Rights Reserved.

	NOTICE: Adobe permits you to use, modify, and distribute this file
	in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the first button in a Spark ButtonBar component.

	   @see spark.components.ButtonBar
	   @see spark.components.ButtonBarButton

	  @langversion 3.0
	  @playerversion Flash 10
	  @playerversion AIR 1.5
	  @productversion Flex 4
-->
<s:SparkSkin xmlns:fx = "http://ns.adobe.com/mxml/2009"
			 xmlns:s = "library://ns.adobe.com/flex/spark"
			 xmlns:fb = "http://ns.adobe.com/flashbuilder/2009"
			 minWidth = "21"
			 minHeight = "21"
			 alpha.disabledStates = "0.5">

	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("gfp.view.main.CustomButtonBarButton")]
    ]]>
	</fx:Metadata>

	<fx:Script fb:purpose = "styling">
		import mx.events.FlexEvent;
		
		/* Define the skin elements that should not be colorized.
		   For toggle button, the graphics are colorized but the label is not. */
		private static const exclusions:Array = ["labelDisplay"];
		
		/**
		 * @private
		 */
		override public function get colorizeExclusions():Array
		{
			return exclusions;
		}
		
		private var cornerRadius:Number = 2;
		
		protected function gr_creationComplete(evt:FlexEvent):void
		{
			if (hostComponent)
			{
				var dataObj:Object = hostComponent.data;
				img.source = dataObj.icon;
			}
		}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 * @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void
		{
			var cr:Number = getStyle("cornerRadius");
			
			if (cornerRadius != cr)
			{
				//cornerRadius = cr;
				//shadow.radiusX = cornerRadius;
				//fill.radiusX = cornerRadius;
				//lowlight.radiusX = cornerRadius;
				//highlightStroke.radiusX = cornerRadius;
				//border.radiusX = cornerRadius;
			}
			
			if (hldownstroke1)
			{
				//hldownstroke1.radiusX = cornerRadius;
			}
			
			if (hldownstroke2)
			{
				//hldownstroke2.radiusX = cornerRadius;
			}
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
	</fx:Script>

	<!-- states -->
	<s:states>
		<s:State name = "up"/>

		<s:State name = "over"
				 stateGroups = "overStates"/>

		<s:State name = "down"
				 stateGroups = "downStates"/>

		<s:State name = "disabled"
				 stateGroups = "disabledStates"/>

		<s:State name = "upAndSelected"
				 stateGroups = "selectedStates, selectedUpStates"/>

		<s:State name = "overAndSelected"
				 stateGroups = "overStates, selectedStates"/>

		<s:State name = "downAndSelected"
				 stateGroups = "downStates, selectedStates"/>

		<s:State name = "disabledAndSelected"
				 stateGroups = "selectedUpStates, disabledStates, selectedStates"/>
	</s:states>

	<s:Group left = "-1"
			 right = "0"
			 top = "-1"
			 bottom = "-1">

		<!--- @private -->
		<s:Rect id = "fill"
				left = "2"
				right = "1"
				top = "2"
				bottom = "2">
			<s:fill>
				<s:SolidColor color = "0xAAAAAA"
							  color.selectedUpStates = "0xeef4fb"
							  color.overStates = "0xeef4fb"
							  color.downStates = "0xAAAAAA"
							  alpha.downStates = ".7"/>
			</s:fill>
		</s:Rect>

		<!--- @private -->
		<s:Rect id = "hldownstroke1"
				left = "2"
				right = "1"
				top = "2"
				bottom = "2"
				topLeftRadiusX = "2"
				bottomLeftRadiusX = "2"
				includeIn = "downStates, selectedUpStates, overAndSelected">
			<s:stroke>
				<s:LinearGradientStroke rotation = "90"
										weight = "1">
					<s:GradientEntry color = "0x000000"
									 alpha = "0.25"
									 ratio = "0.0"/>

					<s:GradientEntry color = "0x000000"
									 alpha = "0.25"
									 ratio = "0.001"/>

					<s:GradientEntry color = "0x000000"
									 alpha = "0.07"
									 ratio = "0.0011"/>

					<s:GradientEntry color = "0x000000"
									 alpha = "0.07"
									 ratio = "0.965"/>

					<s:GradientEntry color = "0x000000"
									 alpha = "0.00"
									 ratio = "0.9651"/>
				</s:LinearGradientStroke>
			</s:stroke>
		</s:Rect>

		<!--- @private -->
		<s:Rect id = "hldownstroke2"
				left = "3"
				right = "2"
				top = "3"
				bottom = "3"
				topLeftRadiusX = "2"
				bottomLeftRadiusX = "2"
				includeIn = "downStates, selectedUpStates, overAndSelected">
			<s:stroke>
				<s:LinearGradientStroke rotation = "90"
										weight = "1">
					<s:GradientEntry color = "0x000000"
									 alpha = "0.09"
									 ratio = "0.0"/>

					<s:GradientEntry color = "0x000000"
									 alpha = "0.00"
									 ratio = "0.0001"/>
				</s:LinearGradientStroke>
			</s:stroke>
		</s:Rect>
	</s:Group>

	<s:HGroup verticalCenter = "0"
			  horizontalCenter = "0"
			  gap = "10"
			  paddingLeft = "10"
			  paddingRight = "20">
		<s:Graphic id = "gr"
				   creationComplete = "gr_creationComplete(event);"
				   horizontalCenter = "0"
				   verticalCenter = "0">
			<s:BitmapImage id = "img"/>
		</s:Graphic>

		<!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
		<s:Label id = "labelDisplay"
				 textAlign = "center"
				 verticalAlign = "middle"
				 maxDisplayedLines = "1"
				 horizontalCenter = "0"
				 verticalCenter = "0"
				 paddingTop = "4"
				 color = "#ffffff"
				 color.selectedUpStates = "#2074A3"
				 color.overStates = "#2074A3">
			<s:filters>
				<s:DropShadowFilter distance = "1"
									quality = "1"
									color = "#c0c0c0"
									includeIn = "selectedStates, over"/>
			</s:filters>
		</s:Label>
	</s:HGroup>
</s:SparkSkin>
